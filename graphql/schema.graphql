type Book {
  id: Int!
  name: String
  authorId: Int
  genre: String
  author: Author
}

input BookInput {
  name: String!
  genre: String!
  authorId: Int!
}

type BookConnection {
  edges: [BookEdge]
  totalCount: Int
  pageInfo: PageInfo
}

type BookEdge {
  node: Book
  cursor: String!
}

type Author {
  id: Int!
  name: String
  age: Int
  book: [Book]
}

input AuthorInput {
  name: String
  age: Int
}

type AuthorConnection {
  edges: [AuthorEdge]
  totalCount: Int
  pageInfo: PageInfo
}

type AuthorEdge {
  node: Author
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  book(id: Int): Book
  books(first: Int, after: Int): BookConnection
  author(id: Int): Author
  authors(first: Int, after: String): AuthorConnection
  login(username: String, password: String): UserOutput
}

type User {
  username: String!
  password: String!
}

type UserOutput {
  jwt: String!
}
